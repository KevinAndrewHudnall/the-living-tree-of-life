6.3 Outline of function MakeTree
This function uses the Galton-Watson branching process following reference (Raimundas Gaigalas, 2024) to generate a random tree at the scale input and using the max number of offspring input.
function MakeTree(Scale, M, G)
	Probabilities\gets rand(1,\ \ M+1)		% Generate offspring probabilities
% Generate the offspring distribution function as the cumulative sum of Probabilities.
Cum_Probs\gets\ cumsum(Probabilities)								 
Generations \gets rand(0\ ,\ G) 			% Randomly select number of generations.
Parent\gets 0					% Initialize Parent to zero.
Child_Count\ \gets1				% Count children in last generation; set to 1.
for\ i from 1 to Generations	% Begin Galton-Watson branching
% after (Raimundas Gaigalas, 2024).

% Determine the linear indices of the parents in the previous generation as a vector.
	Parent_Index\gets [(1\ +\ length(Parent)\ â€“ Child_Count) : length(Parent)]
% Update Parent_Count to continue determining linear indices of parents
	Parent_Count\gets ChildCount
% Generate the offspring distribution as a random vector
	Child_Dist\gets rand(1, length(Parent_Count))	
Child_Count\gets0			% Initialize to zero.
for j from 1 to M
% set Index to contain all values of Parent_Index that are greater than the jth % value of Cum_Probs but less than the (j+1)th value of Cum_Probs.
Index\gets \left\{Parent_Index\middle| C u m_Probs\left(j\right)<Parent_Index<Cum_Probs\left(j+1\right)\right\}	
	if Index is not empty			% If at least one parent birthed j kids.
% Get the number of offspring for each parent by making a vector of 
% Parent concatenated with the vector Index repeated j\ times.
		Parent\gets [Parent repmat(Index,\ 1,\ j)]	
Child_Count\gets Child_Count+ additional children	% Update.
			end
		end
if Child_Count is zero				% If the tree has gone extinct
	Gen_To_Extinction\gets i		% Record generations to extinction.
	break					% break from the for loop.
end
	end
return 	Scale, Parent, Node_Coords, Leaf_Coords 		% Return tree components.
